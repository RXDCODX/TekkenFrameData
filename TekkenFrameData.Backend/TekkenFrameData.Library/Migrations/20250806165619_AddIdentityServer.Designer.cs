// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TekkenFrameData.Library.DB;

#nullable disable

namespace TekkenFrameData.Cli.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250806165619_AddIdentityServer")]
    partial class AddIdentityServer
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TekkenFrameData.Library.Models.Configuration.Configuration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.PrimitiveCollection<long[]>("AdminIdsArray")
                        .IsRequired()
                        .HasColumnType("bigint[]");

                    b.Property<string>("ApiClientId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ApiClientSecret")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BotToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DiscordToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SSH_Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SSH_Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SteamClientLogin")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SteamClientPassword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UpdateServiceBotToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Configuration");
                });

            modelBuilder.Entity("TekkenFrameData.Library.Models.DailyStreak.WankWavuPlayer", b =>
                {
                    b.Property<string>("TwitchId")
                        .HasColumnType("text");

                    b.Property<string>("CurrentNickname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.PrimitiveCollection<string[]>("Nicknames")
                        .HasColumnType("text[]");

                    b.Property<string>("PSNLink")
                        .HasColumnType("text");

                    b.Property<string>("SteamLink")
                        .HasColumnType("text");

                    b.Property<string>("TekkenId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TwitchId");

                    b.ToTable("WankWavuPlayers");
                });

            modelBuilder.Entity("TekkenFrameData.Library.Models.Discord.DiscordFramedataChannel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("ChannelId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("ChannelName")
                        .HasColumnType("text");

                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("GuildName")
                        .HasColumnType("text");

                    b.Property<decimal?>("OwnerId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("OwnerName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DiscordFramedataChannels");
                });

            modelBuilder.Entity("TekkenFrameData.Library.Models.ExternalServices.Twitch.TwitchTokenInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeSpan>("ExpiresIn")
                        .HasColumnType("interval");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("WhenCreated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("TwitchToken");
                });

            modelBuilder.Entity("TekkenFrameData.Library.Models.FrameData.Character", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<byte[]>("Image")
                        .HasColumnType("bytea");

                    b.Property<string>("ImageExtension")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LinkToImage")
                        .HasColumnType("text");

                    b.Property<string>("PageUrl")
                        .HasColumnType("text");

                    b.PrimitiveCollection<string[]>("Strengths")
                        .HasColumnType("text[]");

                    b.PrimitiveCollection<string[]>("Weaknesess")
                        .HasColumnType("text[]");

                    b.HasKey("Name");

                    b.ToTable("tekken_characters");
                });

            modelBuilder.Entity("TekkenFrameData.Library.Models.FrameData.Move", b =>
                {
                    b.Property<string>("CharacterName")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Command")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("BlockFrame")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CounterHitFrame")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Damage")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("HeatBurst")
                        .HasColumnType("boolean");

                    b.Property<bool>("HeatEngage")
                        .HasColumnType("boolean");

                    b.Property<bool>("HeatSmash")
                        .HasColumnType("boolean");

                    b.Property<string>("HitFrame")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("HitLevel")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("Homing")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUserChanged")
                        .HasColumnType("boolean");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<bool>("PowerCrush")
                        .HasColumnType("boolean");

                    b.Property<bool>("RequiresHeat")
                        .HasColumnType("boolean");

                    b.Property<string>("StanceCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("StanceName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("StartUpFrame")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("Throw")
                        .HasColumnType("boolean");

                    b.Property<bool>("Tornado")
                        .HasColumnType("boolean");

                    b.HasKey("CharacterName", "Command");

                    b.ToTable("tekken_moves");
                });

            modelBuilder.Entity("TekkenFrameData.Library.Models.FrameData.TwitchAcceptesToken", b =>
                {
                    b.Property<string>("TwitchId")
                        .HasColumnType("text");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("WhenCreated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("TwitchId");

                    b.ToTable("AcceptesTokens");
                });

            modelBuilder.Entity("TekkenFrameData.Library.Models.FrameData.TwitchLeaderboardUser", b =>
                {
                    b.Property<string>("TwitchId")
                        .HasColumnType("text");

                    b.Property<string>("ChannelId")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TekkenVictorinaWins")
                        .HasColumnType("integer");

                    b.HasKey("TwitchId", "ChannelId");

                    b.ToTable("TwitchLeaderboardUsers");
                });

            modelBuilder.Entity("TekkenFrameData.Library.Models.FrameData.TwitchTekkenChannel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("FramedataStatus")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("TwitchId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TekkenChannels");
                });

            modelBuilder.Entity("TekkenFrameData.Library.Models.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("TekkenFrameData.Library.Models.Twitch.AlisaCollab.AlisaIgnoreTwitchUser", b =>
                {
                    b.Property<string>("TwitchId")
                        .HasColumnType("text");

                    b.Property<string>("TwitchName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TwitchId");

                    b.ToTable("AlisaIgnoreTwitchUsers");
                });

            modelBuilder.Entity("TekkenFrameData.Library.Models.Twitch.GlobalNotificationMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Services")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("GlobalNotificationMessage");
                });

            modelBuilder.Entity("TekkenFrameData.Library.Models.Twitch.TwitchNotificationChannelsState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChannelId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("MessageId");

                    b.ToTable("GlobalNotificatoinChannelsState");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TekkenFrameData.Library.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TekkenFrameData.Library.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TekkenFrameData.Library.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TekkenFrameData.Library.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TekkenFrameData.Library.Models.FrameData.Move", b =>
                {
                    b.HasOne("TekkenFrameData.Library.Models.FrameData.Character", "Character")
                        .WithMany("Movelist")
                        .HasForeignKey("CharacterName")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("TekkenFrameData.Library.Models.Twitch.TwitchNotificationChannelsState", b =>
                {
                    b.HasOne("TekkenFrameData.Library.Models.FrameData.TwitchTekkenChannel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TekkenFrameData.Library.Models.Twitch.GlobalNotificationMessage", "Message")
                        .WithMany()
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("Message");
                });

            modelBuilder.Entity("TekkenFrameData.Library.Models.FrameData.Character", b =>
                {
                    b.Navigation("Movelist");
                });
#pragma warning restore 612, 618
        }
    }
}
