// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TekkenFrameData.Library.DB;

#nullable disable

namespace TekkenFrameData.Cli.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TekkenFrameData.Library.Models.Configuration.Configuration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.PrimitiveCollection<long[]>("AdminIdsArray")
                        .IsRequired()
                        .HasColumnType("bigint[]");

                    b.Property<string>("ApiClientId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ApiClientSecret")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BotToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Configuration");
                });

            modelBuilder.Entity("TekkenFrameData.Library.Models.ExternalServices.Twitch.TwitchTokenInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeSpan>("ExpiresIn")
                        .HasColumnType("interval");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("WhenCreated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("TwitchToken");
                });

            modelBuilder.Entity("TekkenFrameData.Library.Models.FrameData.TekkenCharacter", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("LastUpdateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LinkToImage")
                        .HasColumnType("text");

                    b.HasKey("Name");

                    b.ToTable("tekken_characters");
                });

            modelBuilder.Entity("TekkenFrameData.Library.Models.FrameData.TekkenMove", b =>
                {
                    b.Property<string>("CharacterName")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Command")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("BlockFrame")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CounterHitFrame")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Damage")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("HeatBurst")
                        .HasColumnType("boolean");

                    b.Property<bool>("HeatEngage")
                        .HasColumnType("boolean");

                    b.Property<bool>("HeatSmash")
                        .HasColumnType("boolean");

                    b.Property<string>("HitFrame")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("HitLevel")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("Homing")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUserChanged")
                        .HasColumnType("boolean");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<bool>("PowerCrush")
                        .HasColumnType("boolean");

                    b.Property<bool>("RequiresHeat")
                        .HasColumnType("boolean");

                    b.Property<string>("StanceCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("StanceName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("StartUpFrame")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("Throw")
                        .HasColumnType("boolean");

                    b.Property<bool>("Tornado")
                        .HasColumnType("boolean");

                    b.HasKey("CharacterName", "Command");

                    b.ToTable("tekken_moves");
                });

            modelBuilder.Entity("TekkenFrameData.Library.Models.FrameData.TwitchAcceptesToken", b =>
                {
                    b.Property<string>("TwitchId")
                        .HasColumnType("text");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("WhenCreated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("TwitchId");

                    b.ToTable("AcceptesTokens");
                });

            modelBuilder.Entity("TekkenFrameData.Library.Models.FrameData.TwitchLeaderboardUser", b =>
                {
                    b.Property<string>("TwitchId")
                        .HasColumnType("text");

                    b.Property<string>("ChannelId")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TekkenVictorinaWins")
                        .HasColumnType("integer");

                    b.HasKey("TwitchId", "ChannelId");

                    b.ToTable("TwitchLeaderboardUsers");
                });

            modelBuilder.Entity("TekkenFrameData.Library.Models.FrameData.TwitchTekkenChannel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("FramedataStatus")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("TwitchId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TekkenChannels");
                });

            modelBuilder.Entity("TekkenFrameData.Library.Models.FrameData.TekkenMove", b =>
                {
                    b.HasOne("TekkenFrameData.Library.Models.FrameData.TekkenCharacter", "Character")
                        .WithMany("Movelist")
                        .HasForeignKey("CharacterName")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("TekkenFrameData.Library.Models.FrameData.TekkenCharacter", b =>
                {
                    b.Navigation("Movelist");
                });
#pragma warning restore 612, 618
        }
    }
}
