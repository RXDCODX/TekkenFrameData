version: '3.8'

services:
  db:
    image: postgres:13
    container_name: tekken_db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: tekken_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - tekken_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  migrations:
    build:
      context: ./
      dockerfile: ./TekkenFrameData.Backend/TekkenFrameData.Cli/Dockerfile
    container_name: tekken_migrations
    depends_on:
      db:
        condition: service_healthy
    environment:
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: tekken_db
      DB_USER: postgres
      DB_PASSWORD: postgres
    networks:
      - tekken_network

  scraper:
    build:
      context: ./TekkenFrameData.Scrupper
      dockerfile: Dockerfile
    container_name: tekken_scraper
    depends_on:
      migrations:
        condition: service_completed_successfully
    environment:
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: tekken_db
      DB_USER: postgres
      DB_PASSWORD: postgres
    networks:
      - tekken_network

  service:
    build:
      context: ./TekkenFrameData.Backend/TekkenFrameData.Service
      dockerfile: Dockerfile
    container_name: tekken_service
    depends_on:
      scraper:
        condition: service_completed_successfully
    ports:
      - "8080:8080"
      - "8081:8081"
    networks:
      - tekken_network
      
  watcher:
    build:
      context: ./TekkenFrameData.Backend/TekkenFrameData.Watcher
      dockerfile: Dockerfile
    container_name: tekken_watcher
    depends_on:
      scraper:
        condition: service_completed_successfully
    ports:
      - "8080:8080"
      - "8081:8081"
    networks:
      - tekken_network

  frontend:
    build:
      context: ./TekkenFrameData.Frontend
      dockerfile: Dockerfile
    container_name: tekken_frontend
    depends_on:
      service:
        condition: service_completed_successfully
    ports:
      - "8080:5173"
    networks:
      - tekken_network

volumes:
  postgres_data:

networks:
  tekken_network:
    driver: bridge